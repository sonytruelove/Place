// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"] 
  binaryTargets = ["native","debian-openssl-3.0.x","linux-musl","linux-musl-openssl-3.0.x"]
}


datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User{
  id    Int @id @default(sequence())
  name  String 
  email String @unique
  hash  String 
  salt  String
  
  account Account?
}
model Account{
  id      Int @id @default(sequence(minValue: 100,start: 100))
  ownerId Int @unique
  owner   User @relation(fields: [ownerId], references: [id])
  uniqueQuota Int @default(1)
  name String @default("Placer")
  discription String @default("")
  placerList Account[] @relation("placerList")
  placerListRelation Account[] @relation("placerList")
  places Place[]
  uniquePlaces UniquePlace[]
}

model Place {
  id Int @id @default(sequence())
  ownerId Int  
  abovePlaceId Int?  
  owner   Account @relation(fields: [ownerId], references: [id])
  accessIdList  Int[]
  name String
  url  String? 
  discription String?
  publicAccess Boolean @default(false)
  underPlace Place[] @relation("directory")
  abovePlace Place? @relation("directory",fields: [abovePlaceId],references:[id])
  files File[]  @relation("directory")
}

model UniquePlace {
  id Int @id @default(sequence())
  ownerId Int  
  owner   Account @relation(fields: [ownerId], references: [id])
  accessIdList  Int[] 
  name String @unique
  url  String? @unique
  discription String?
  publicAccess Boolean @default(false)
  files File[]  @relation("directory")
}


model File{
  id Int @id @unique @default(sequence())
  placeId Int
  abovePlace Place? @relation("directory",fields: [placeId],references: [id],map: "place_fk")
  aboveUniquePlace UniquePlace? @relation("directory",fields: [placeId],references: [id],map: "unique_place_fk")
 
  accessIdList  Int[]

  name String
  size Int
  ext  String
  url  String 
  uploadedAt DateTime @default(now())
}
