/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * File Place
 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";

export type FileControllerSearchParams = {
  query: string;
};

export type FileControllerGetAllInPlaceParams = {
  placeid: number;
  count: number;
  offset: number;
};

export type FileControllerUploadBody = {
  files?: Blob[];
  placeid?: number;
};

export interface PatchAccountDTO {
  places: string[];
}

export interface AccountDTO {
  id: number;
  ownerId: number;
  places: string[];
}

export interface GetSessionDTO {
  email: string;
  exp: number;
  iat: number;
  id: number;
}

export interface SignUpDTO {
  email: string;
  name: string;
  password: string;
}

export interface SignInDTO {
  email: string;
  password: string;
}

export interface DownloadFileDTO {
  url: string;
}

export interface FileDTO {
  [key: string]: unknown;
}

export interface CreateUniquePlaceDTO {
  placeName: string;
}

export interface CreatePlaceDTO {
  abovePlaceId: number;
  placeName: string;
}

export const placeControllerCreate = <TData = AxiosResponse<void>>(
  createPlaceDTO: CreatePlaceDTO,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.post(`/places`, createPlaceDTO, options);

export const placeControllerGetOne = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.get(`/places/${id}`, options);

export const uniquePlaceControllerCreateUnique = <TData = AxiosResponse<void>>(
  createUniquePlaceDTO: CreateUniquePlaceDTO,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.post(`/uniqueplaces`, createUniquePlaceDTO, options);

export const fileControllerUpload = <TData = AxiosResponse<void>>(
  fileControllerUploadBody: FileControllerUploadBody,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  const formData = new FormData();
  if (fileControllerUploadBody.placeid !== undefined) {
    formData.append("placeid", fileControllerUploadBody.placeid.toString());
  }
  if (fileControllerUploadBody.files !== undefined) {
    fileControllerUploadBody.files.forEach((value) =>
      formData.append("files", value),
    );
  }

  return axios.post(`/files`, formData, options);
};

export const fileControllerGetAllInPlace = <TData = AxiosResponse<FileDTO>>(
  params: FileControllerGetAllInPlaceParams,
  options?: AxiosRequestConfig,
): Promise<TData> =>
  axios.get(`/files`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const fileControllerSearch = <TData = AxiosResponse<FileDTO>>(
  params: FileControllerSearchParams,
  options?: AxiosRequestConfig,
): Promise<TData> =>
  axios.get(`/files/search`, {
    ...options,
    params: { ...params, ...options?.params },
  });

export const fileControllerGetOne = <TData = AxiosResponse<FileDTO>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.get(`/files/${id}`, options);

export const fileControllerDelete = <TData = AxiosResponse<number>>(
  id: number,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.delete(`/files/${id}`, options);

export const fileControllerGetUrlFromCurrentPlace = <
  TData = AxiosResponse<DownloadFileDTO>,
>(
  accountid: number,
  placeid: number,
  filename: string,
  options?: AxiosRequestConfig,
): Promise<TData> =>
  axios.get(`/files/url/${accountid}/${placeid}/${filename}`, options);

export const fileControllerGetUrlFromUser = <
  TData = AxiosResponse<DownloadFileDTO>,
>(
  accountid: number,
  filename: string,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.get(`/files/url/${accountid}/${filename}`, options);

export const authControllerSignIn = <TData = AxiosResponse<void>>(
  signInDTO: SignInDTO,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.post(`/auth/sign-in`, signInDTO, options);

export const authControllerSignUp = <TData = AxiosResponse<void>>(
  signUpDTO: SignUpDTO,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.post(`/auth/sign-up`, signUpDTO, options);

export const authControllerSignOut = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig,
): Promise<TData> => axios.post(`/auth/sign-out`, undefined, options);

export const authControllerGetSession = <TData = AxiosResponse<GetSessionDTO>>(
  options?: AxiosRequestConfig,
): Promise<TData> => axios.get(`/auth/session`, options);

export const accountControllerGetAccount = <TData = AxiosResponse<AccountDTO>>(
  options?: AxiosRequestConfig,
): Promise<TData> => axios.get(`/account`, options);

export const accountControllerPatchAccount = <
  TData = AxiosResponse<PatchAccountDTO>,
>(
  patchAccountDTO: PatchAccountDTO,
  options?: AxiosRequestConfig,
): Promise<TData> => axios.patch(`/account`, patchAccountDTO, options);

export type PlaceControllerCreateResult = AxiosResponse<void>;
export type PlaceControllerGetOneResult = AxiosResponse<void>;
export type UniquePlaceControllerCreateUniqueResult = AxiosResponse<void>;
export type FileControllerUploadResult = AxiosResponse<void>;
export type FileControllerGetAllInPlaceResult = AxiosResponse<FileDTO>;
export type FileControllerSearchResult = AxiosResponse<FileDTO>;
export type FileControllerGetOneResult = AxiosResponse<FileDTO>;
export type FileControllerDeleteResult = AxiosResponse<number>;
export type FileControllerGetUrlFromCurrentPlaceResult =
  AxiosResponse<DownloadFileDTO>;
export type FileControllerGetUrlFromUserResult = AxiosResponse<DownloadFileDTO>;
export type AuthControllerSignInResult = AxiosResponse<void>;
export type AuthControllerSignUpResult = AxiosResponse<void>;
export type AuthControllerSignOutResult = AxiosResponse<void>;
export type AuthControllerGetSessionResult = AxiosResponse<GetSessionDTO>;
export type AccountControllerGetAccountResult = AxiosResponse<AccountDTO>;
export type AccountControllerPatchAccountResult =
  AxiosResponse<PatchAccountDTO>;
