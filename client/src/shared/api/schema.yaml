openapi: 3.0.0
paths:
  /places:
    post:
      operationId: PlaceController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlaceDTO"
      responses:
        "201":
          description: ""
    get:
      operationId: PlaceController_getAvailable
      parameters:
        - name: skip
          required: false
          in: query
          example: 0
          schema:
            default: 0
            type: number
        - name: take
          required: false
          in: query
          example: 2
          schema:
            default: 10
            type: number
        - name: isUnique
          required: false
          in: query
          example: false
          schema:
            default: false
            type: boolean
        - name: searchArea
          required: false
          in: query
          example: My
          schema:
            default: All
            type: string
        - name: searchText
          required: false
          in: query
          example: My place
          schema:
            default: ""
            type: string
      responses:
        "200":
          description: ""
  /places/{id}:
    patch:
      operationId: PlaceController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlaceDTO"
      responses:
        "204":
          description: ""
    get:
      operationId: PlaceController_getOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
  /placer-list/{id}:
    get:
      operationId: PlacerListController_getOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
  /placer-list:
    get:
      operationId: PlacerListController_getAllPublic
      parameters:
        - name: skip
          required: false
          in: query
          example: 0
          schema:
            default: 0
            type: number
        - name: take
          required: false
          in: query
          example: 2
          schema:
            default: 10
            type: number
        - name: searchArea
          required: false
          in: query
          example: My
          schema:
            default: All
            type: string
        - name: searchText
          required: false
          in: query
          example: Placer
          schema:
            default: ""
            type: string
      responses:
        "200":
          description: ""
    patch:
      operationId: PlacerListController_update
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlacerListDTO"
      responses:
        "200":
          description: ""
  /uniqueplaces:
    post:
      operationId: UniquePlaceController_createUnique
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUniquePlaceDTO"
      responses:
        "201":
          description: ""
  /files:
    post:
      operationId: FileController_upload
      parameters: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                placeid:
                  type: number
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: ""
    get:
      operationId: FileController_getAllInPlace
      parameters:
        - name: placeid
          required: true
          in: query
          schema:
            type: number
        - name: count
          required: true
          in: query
          schema:
            type: number
        - name: offset
          required: true
          in: query
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDTO"
  /files/search:
    get:
      operationId: FileController_search
      parameters:
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDTO"
  /files/{id}:
    get:
      operationId: FileController_getOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileDTO"
    delete:
      operationId: FileController_delete
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: number
  /files/url/{accountid}/{placeid}/{filename}:
    get:
      operationId: FileController_getUrlFromCurrentPlace
      parameters:
        - name: accountid
          required: true
          in: path
          schema:
            type: number
        - name: placeid
          required: true
          in: path
          schema:
            type: number
        - name: filename
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/downloadFileDTO"
  /files/url/{accountid}/{filename}:
    get:
      operationId: FileController_getUrlFromUser
      parameters:
        - name: accountid
          required: true
          in: path
          schema:
            type: number
        - name: filename
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/downloadFileDTO"
  /auth/sign-in:
    post:
      operationId: AuthController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInDTO"
      responses:
        "200":
          description: ""
  /auth/sign-up:
    post:
      operationId: AuthController_signUp
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpDTO"
      responses:
        "201":
          description: ""
  /auth/sign-out:
    post:
      operationId: AuthController_signOut
      parameters: []
      responses:
        "200":
          description: ""
  /auth/session:
    get:
      operationId: AuthController_getSession
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSessionDTO"
  /account:
    get:
      operationId: AccountController_getAccount
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountDTO"
    patch:
      operationId: AccountController_patchAccount
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchAccountDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchAccountDTO"
info:
  title: File Place
  description: ""
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreatePlaceDTO:
      type: object
      properties:
        placeName:
          type: string
          example: My place
        abovePlaceId:
          type: number
      required:
        - placeName
        - abovePlaceId
    UpdatePlaceDTO:
      type: object
      properties:
        placeName:
          type: string
          example: My place
        publicAccess:
          type: boolean
          example: true
      required:
        - placeName
        - publicAccess
    UpdatePlacerListDTO:
      type: object
      properties:
        id:
          type: number
          example: 0
          default: 0
    CreateUniquePlaceDTO:
      type: object
      properties:
        placeName:
          type: string
          example: My place
      required:
        - placeName
    FileDTO:
      type: object
      properties: {}
    downloadFileDTO:
      type: object
      properties:
        url:
          type: string
      required:
        - url
    SignInDTO:
      type: object
      properties:
        email:
          type: string
          example: CoolMan@gmail.com
        password:
          type: string
      required:
        - email
        - password
    SignUpDTO:
      type: object
      properties:
        name:
          type: string
          example: CoolMan
        email:
          type: string
          example: CoolMan@gmail.com
        password:
          type: string
      required:
        - name
        - email
        - password
    GetSessionDTO:
      type: object
      properties:
        id:
          type: number
        email:
          type: string
        iat:
          type: number
        exp:
          type: number
      required:
        - id
        - email
        - iat
        - exp
    AccountDTO:
      type: object
      properties:
        id:
          type: number
        ownerId:
          type: number
        places:
          type: array
          items:
            type: string
      required:
        - id
        - ownerId
        - places
    PatchAccountDTO:
      type: object
      properties:
        name:
          type: string
          example: CoolMan
        discription:
          type: string
          example: I'm CoolMan!
